plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id 'com.diffplug.gradle.spotless' version '4.5.1'
	id 'com.google.cloud.tools.jib' version '3.2.1'
}

group = 'swm.toy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// springboot
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// jwt
//	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5',
//			'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// h2
	runtimeOnly 'com.h2database:h2'

	// p6spy
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.0'

	// openapi(swagger)
	implementation 'io.swagger.core.v3:swagger-core:2.2.2'
	implementation('org.springdoc:springdoc-openapi-ui:1.6.9') {
		exclude group: 'io.swagger.core.v3', module: 'swagger-core'
	}

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

// gradlew spotlessJavaApply
spotless {
	java {
		target project.fileTree(project.rootDir) {
			include '**/*.java'
			exclude 'build/generated/**/*.*', 'build/generated-examples/**/*.*'
		}

		removeUnusedImports()
		trimTrailingWhitespace()
		googleJavaFormat().aosp()
	}
}

// gradlew jib
// gradlew jibDockerBuild
jib {
	from {
		image = "openjdk:17-alpine"
		platforms {
			platform {
				architecture = 'amd64'
				os = 'linux'
			}
			platform {
				architecture = 'arm64'
				os = 'linux'
			}
		}
	}
	to {
		image = "swm-${rootProject.name}"
	}
	container {
		ports = ["8080"]
	}
}